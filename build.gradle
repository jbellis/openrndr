import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform


buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:1.4.32"
//        classpath "com.netflix.nebula:nebula-publishing-plugin:17.3.0"
        classpath "com.netflix.nebula:nebula-release-plugin:15.1.0"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.5.0'
}

apply plugin: 'org.jetbrains.dokka'

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")


project.ext {
    lwjglVersion = '3.2.3'
    javacpp_version = '1.5.5'
    ffmpeg_version = "4.3.2-$javacpp_version"
    kotlinVersion = '1.5.0'
    spekVersion = '2.0.15'
    jsoupVersion = '1.13.1'
}

tasks.named("dokkaHtml") {
    moduleName.set("openrndr")
    dokkaSourceSets {

        named("main") {
            perPackageOption {
                matchingRegex.set(".*gl3.*")
                suppress.set(true)
            }
            perPackageOption {
                matchingRegex.set(".*internal*")
                suppress.set(true)
            }
            perPackageOption {
                matchingRegex.set(".*artifex*")
                suppress.set(true)
            }
            perPackageOption {
                matchingRegex.set("io\\.lacuna.*")
                suppress.set(true)
            }
        }
    }
    outputDirectory.set(file("build/docs"))
    includeNonPublic.set(false)
    reportUndocumented.set(true)
    skipEmptyPackages.set(true)
    remoteUrl.set(uri("https://github.com/openrndr/openrndr/master/src/main/kotlin").toURL())
}

["openrndr-animatable", "openrndr-dialogs", "openrndr-filter", "openrndr-core", "openrndr-math", "openrndr-color", "openrndr-event"].each {

    project(":$it") {
        apply plugin: 'org.jetbrains.dokka'
    }
}


allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'kotlin'

    group 'org.openrndr'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'io.github.microutils:kotlin-logging-jvm:2.0.6'
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.0-RC'
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

        testImplementation "org.spekframework.spek2:spek-dsl-jvm:$spekVersion"
        testImplementation "org.amshove.kluent:kluent:1.65"
        testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
        testRuntimeOnly "org.spekframework.spek2:spek-runner-junit5:$spekVersion"
        testRuntimeOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    }

    test {
        useJUnitPlatform {
            includeEngines 'spek2'
        }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    javadoc {
        options.addBooleanOption 'Xdoclint:none', true
    }
}

configure(allprojects.findAll { it.name != "openrndr-demos" }) {
    apply plugin: 'nebula.release'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    java {
        withJavadocJar()
        withSourcesJar()
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                groupId = "org.openrndr"
                artifactId = "$project.name"

                description = "$project.name"
                pom {
                    name = "$project.name"
                    description = "$project.name"
                    url = 'http://openrndr.org'
                    developers {
                        developer {
                            id = 'edwinjakobs'
                            name = 'Edwin Jakobs'
                            email = 'edwin@openrndr.org'
                        }
                    }
                    license {
                        licenses {
                            license {
                                name = 'BSD-2-Clause'
                                url = 'https://github.com/openrndr/openrndr/blob/master/LICENSE'
                                distribution = 'repo'
                            }
                        }
                    }
                    scm {
                        connection = "scm:git:git@github.com:openrndr/openrndr.git"
                        developerConnection = "scm:git:ssh://github.com/openrndr/openrndr.git"
                        url = "https://github.com/openrndr/openrndr"
                    }
                }
            }
        }
        repositories {
            maven {
                credentials {
                    username findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                    password findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
                }
                if (!isReleaseVersion) {
                    url "https://s01.oss.sonatype.org/content/repositories/snapshots"
                } else {
                    url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
                }
            }
        }
    }
    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.mavenJava
    }
}

configure(subprojects) {
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.AbstractKotlinCompile).all {
        kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlinx.coroutines.InternalCoroutinesApi"]
    }
}

